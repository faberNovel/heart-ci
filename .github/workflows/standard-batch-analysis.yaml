#
# Documentation : https://github.com/faberNovel/heart-ci
#
name: Dareboost + Slack batch analysis

on:
  workflow_call:
    inputs:
      config-directory:
        description: Path to directory holding configuration files
        required: false
        type: string
        default: ci/heart/config
      heart-image-name:
        description: Name of the Heart Docker image to be used
        required: true
        type: string

    secrets:
      DAREBOOST_API_TOKEN:
        description: Dareboost API Token
        required: true
      SLACK_API_TOKEN:
        description: Slack API Token
        required: true
      SLACK_CHANNEL_ID:
        description: Name of the Slack channel on which to send notifications
        required: true

#
# Environment variables used in the current workflow
#
env:
  CACHE_DIRECTORY_NAME: cache-heart
  DEFAULT_CONTAINER_NAME: heart-container

#
# Definition of jobs
#
jobs:
  scan-conf-files:
    name: Look for configuration files in ${{ inputs.config-directory }}
    runs-on: [self-hosted, docker]
    container:
      image: docker://everpeace/curl-jq:latest

    outputs:
      files: ${{ steps.step2.outputs.files }}

    steps:
      - name: Checkout files
        uses: actions/checkout@v2

      - name: Find all JSON files in ${{ inputs.config-directory }}
        id: step2
        working-directory: '${{ inputs.config-directory }}'
        run: |
          echo "::set-output name=files::$(find . -name "*.json" | jq -R -s -c 'split("\n")[:-1]')"

      - run: find . -name "*.json" | jq -R -s -c 'split("\n")[:-1]'
        working-directory: ${{ inputs.config-directory }}

  get-image:
    name: Pull and cache Heart Docker image from Organisation DockerHub
    runs-on: [self-hosted, docker]

    outputs:
      image-tag: ${{ steps.image-info.outputs.image-tag }}
      image-name: ${{ steps.image-info.outputs.image-name }}
      image-owner: ${{ steps.image-info.outputs.image-owner }}

    steps:
      - name: Retrieve image tag and image name from full image name
        run: |
          echo "::set-output name=image-owner::$(echo "${{ inputs.heart-image-name }}" | cut -d '/' -f1)"
          echo "::set-output name=image-name::$(echo "${{ inputs.heart-image-name }}" | cut -d '/' -f2 | cut -d ':' -f1)"
          echo "::set-output name=image-tag::$(echo "${{ inputs.heart-image-name }}" | cut -d '/' -f2 | cut -d ':' -f2)"
        id: image-info

      - name: Cache Docker image archive
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/${{ env.CACHE_DIRECTORY_NAME }}/${{ steps.image-info.outputs.image-owner }}-${{ steps.image-info.outputs.image-name }}-${{ steps.image-info.outputs.image-tag }}.tar.gz
          key: ${{ steps.image-info.outputs.image-owner }}-${{ steps.image-info.outputs.image-name }}-${{ steps.image-info.outputs.image-tag }}

      - name: Create cache folder if not already present
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd ~
          mkdir -p ${{ env.CACHE_DIRECTORY_NAME }}

      - name: Pull Heart Docker image
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          docker pull ${{ inputs.heart-image-name }}

      - name: Cache Heart Docker image as .tar.gz file
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          docker save ${{ inputs.heart-image-name }} | gzip > ~/${{ env.CACHE_DIRECTORY_NAME }}/${{ steps.image-info.outputs.image-owner }}-${{ steps.image-info.outputs.image-name }}-${{ steps.image-info.outputs.image-tag }}.tar.gz

  batch:
    name: Launch batch standard analysis (Dareboost + Slack)
    runs-on: [self-hosted, docker]
    needs: [scan-conf-files, get-image]
    outputs:
      status: ${{ steps.output-step.ouputs.status }}

    strategy:
      fail-fast: false
      matrix:
        conf-file-name: ${{ fromJson(needs.scan-conf-files.outputs.files) }}
      max-parallel: 1

    steps:
      - name: Cache Docker image (as tar.gz)
        uses: actions/cache@v2
        with:
          path: ~/${{ env.CACHE_DIRECTORY_NAME }}/${{ needs.get-image.outputs.image-owner }}-${{ needs.get-image.outputs.image-name }}-${{ needs.get-image.outputs.image-tag }}.tar.gz
          key: ${{ needs.get-image.outputs.image-owner }}-${{ needs.get-image.outputs.image-name }}-${{ needs.get-image.outputs.image-tag }}

      - name: Check presence of configuration files
        if: ${{ always() }}
        run: |
          cd ${{ inputs.config-directory }}
          ls -la

      - name: Load Heart image from cache
        run: docker load -i ~/${{ env.CACHE_DIRECTORY_NAME }}/${{ needs.get-image.outputs.image-owner }}-${{ needs.get-image.outputs.image-name }}-${{ needs.get-image.outputs.image-tag }}.tar.gz

      - name: Retrieve module name from configuration file path
        run: |
          var=$(echo "${{ matrix.conf-file-name }}" | cut -d '/' -f2)
          echo "module=$var" >> $GITHUB_ENV

      - name: Remove existing containers and volumes
        continue-on-error: true
        run: |
          docker rm -f $(docker ps -a -q) || true
          docker volume rm $(docker volume ls -q) || true

      - name: Launch single Heart Analysis
        if: ${{ env.module == 'dareboost' }}
        run: >
          docker run -i
          --name ${{ env.DEFAULT_CONTAINER_NAME }}
          -a stdout
          -e DAREBOOST_API_TOKEN=${{ secrets.DAREBOOST_API_TOKEN }}
          -e SLACK_API_TOKEN=${{ secrets.SLACK_API_TOKEN }}
          -e SLACK_CHANNEL_ID=${{ secrets.SLACK_CHANNEL_ID }}
          -v $(pwd)/${{ inputs.config-directory }}:/usr/heart/${{ inputs.config-directory }}
          ${{ inputs.heart-image-name }}
          dareboost --file '${{inputs.config-directory }}/${{ matrix.conf-file-name }}'

      - name: Wait for container to exit
        if: ${{ always() }}
        run: docker wait ${{ env.DEFAULT_CONTAINER_NAME }}

      - name: Check analysis logs
        if: ${{ always() }}
        id: status
        run: |
          docker logs ${{ env.DEFAULT_CONTAINER_NAME }}

      - name: Remove created Docker container
        if: ${{ always() }}
        run: |
          docker rm -f $(docker ps -a -q) || true
          docker volume rm $(docker volume ls -q) || true